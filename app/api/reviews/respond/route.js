import { NextResponse } from 'next/server';
import Anthropic from '@anthropic-ai/sdk';
import { AI_PERSONAS, getEnrichedPrompt } from '@/lib/ai-personas';

/**
 * API pour g√©n√©rer des r√©ponses aux avis clients
 * Utilise Clark (IA de Fidalyz) avec le contexte de l'organisation
 */
export async function POST(request) {
  try {
    const { 
      review, 
      organization,
      reviewerName,
      rating,
      platform = 'Google'
    } = await request.json();

    if (!review || !organization) {
      return NextResponse.json(
        { error: 'Avis et organisation requis' },
        { status: 400 }
      );
    }

    // Si l'API Anthropic est configur√©e
    if (process.env.ANTHROPIC_API_KEY) {
      try {
        const anthropic = new Anthropic({
          apiKey: process.env.ANTHROPIC_API_KEY,
        });

        // Utiliser Clark avec le contexte de l'organisation
        const enrichedPrompt = getEnrichedPrompt('clark', {
          organization: {
            name: organization.name,
            sector: organization.sector || 'service',
            tone: organization.tone || 'professionnel et chaleureux',
            values: organization.values || 'excellence, service client, innovation',
            specifics: organization.specifics || ''
          }
        });

        // Cr√©er le prompt sp√©cifique pour cette r√©ponse
        const messages = [
          {
            role: 'system',
            content: enrichedPrompt
          },
          {
            role: 'user',
            content: `G√©n√®re une r√©ponse personnalis√©e √† cet avis ${rating}/5 √©toiles sur ${platform}.

**Avis de ${reviewerName || 'un client'} :**
"${review}"

**Instructions sp√©cifiques :**
${rating >= 4 ? 
  '- Remercier chaleureusement\n- Mentionner un √©l√©ment sp√©cifique de leur avis\n- Encourager √† revenir ou recommander' :
  rating === 3 ?
  '- Remercier pour le retour constructif\n- Reconna√Ætre les points positifs ET n√©gatifs\n- Proposer une am√©lioration concr√®te' :
  '- Remercier pour le retour honn√™te\n- Pr√©senter des excuses sinc√®res\n- Proposer une solution concr√®te\n- Inviter √† un contact direct pour r√©soudre le probl√®me'
}

La r√©ponse doit √™tre en fran√ßais, professionnelle, et ne pas d√©passer 150 mots.`
          }
        ];

        const response = await anthropic.messages.create({
          model: 'claude-3-haiku-20240307',
          max_tokens: 300,
          temperature: 0.7,
          messages: messages
        });

        const aiResponse = response.content[0].text;

        return NextResponse.json({
          response: aiResponse,
          aiGenerated: true,
          persona: 'Clark',
          confidence: 0.95
        });

      } catch (aiError) {
        console.error('Anthropic API error:', aiError);
        // Fallback vers les templates
      }
    }

    // Fallback : Templates de r√©ponses selon la note
    const templates = {
      5: [
        `Bonjour ${reviewerName || ''},\n\nUn immense merci pour votre avis 5 √©toiles ! Votre satisfaction est notre plus belle r√©compense. Nous sommes ravis que notre ${organization.service || 'service'} ait r√©pondu √† vos attentes.\n\nAu plaisir de vous revoir tr√®s bient√¥t !\n\nL'√©quipe ${organization.name}`,
        `Merci infiniment ${reviewerName || ''} pour ce retour si positif ! üåü\n\nVotre confiance nous touche √©norm√©ment. Toute l'√©quipe est heureuse d'avoir contribu√© √† votre satisfaction.\n\n√Ä tr√®s bient√¥t !\n\n${organization.name}`
      ],
      4: [
        `Bonjour ${reviewerName || ''},\n\nMerci beaucoup pour votre avis positif ! Nous sommes heureux que vous ayez appr√©ci√© notre ${organization.service || 'service'}.\n\nN'h√©sitez pas √† nous faire part de vos suggestions pour atteindre la perfection !\n\nCordialement,\n${organization.name}`
      ],
      3: [
        `Bonjour ${reviewerName || ''},\n\nMerci pour votre retour constructif. Nous prenons note de vos remarques pour am√©liorer notre service.\n\nNous serions ravis de discuter avec vous pour mieux comprendre vos attentes. N'h√©sitez pas √† nous contacter directement.\n\nBien cordialement,\n${organization.name}`
      ],
      2: [
        `Bonjour ${reviewerName || ''},\n\nNous vous remercions d'avoir pris le temps de partager votre exp√©rience. Nous sommes sinc√®rement d√©sol√©s que notre service n'ait pas √©t√© √† la hauteur.\n\nNous aimerions comprendre ce qui s'est pass√© et trouver une solution. Pourriez-vous nous contacter directement ?\n\nNos excuses les plus sinc√®res,\n${organization.name}`
      ],
      1: [
        `Bonjour ${reviewerName || ''},\n\nNous sommes profond√©ment d√©sol√©s de lire votre retour. Cette exp√©rience ne refl√®te absolument pas nos standards de qualit√©.\n\nNous prenons votre avis tr√®s au s√©rieux. Notre responsable souhaiterait vous contacter personnellement pour comprendre la situation et vous proposer une solution adapt√©e.\n\nVeuillez accepter nos excuses les plus sinc√®res.\n\nLa Direction de ${organization.name}`
      ]
    };

    // S√©lectionner un template appropri√©
    const ratingTemplates = templates[rating] || templates[3];
    const selectedTemplate = ratingTemplates[Math.floor(Math.random() * ratingTemplates.length)];

    // Personnaliser avec les √©l√©ments de l'avis si possible
    let personalizedResponse = selectedTemplate;
    
    // Extraire des mots-cl√©s de l'avis pour personnaliser
    const keywords = review.toLowerCase().match(/\b(service|qualit√©|accueil|produit|√©quipe|rapidit√©|prix)\b/g);
    if (keywords && keywords.length > 0) {
      const keyword = keywords[0];
      personalizedResponse = personalizedResponse.replace(
        'notre service',
        `notre ${keyword}`
      );
    }

    return NextResponse.json({
      response: personalizedResponse,
      aiGenerated: false,
      persona: 'Clark',
      template: true
    });

  } catch (error) {
    console.error('Review response API error:', error);
    return NextResponse.json(
      { 
        error: 'Erreur lors de la g√©n√©ration de la r√©ponse',
        details: error.message
      },
      { status: 500 }
    );
  }
}

/**
 * GET pour tester l'API
 */
export async function GET() {
  return NextResponse.json({
    status: 'ok',
    persona: 'Clark (Fidalyz)',
    capabilities: [
      'R√©ponses personnalis√©es aux avis',
      'Adaptation au contexte de l\'organisation',
      'Gestion des avis positifs et n√©gatifs',
      'Support multi-plateforme',
      'Templates de fallback'
    ],
    requiredParams: {
      review: 'Le texte de l\'avis client',
      organization: {
        name: 'Nom de l\'entreprise',
        sector: 'Secteur d\'activit√©',
        tone: 'Ton de communication',
        values: 'Valeurs de l\'entreprise'
      },
      reviewerName: 'Nom du client (optionnel)',
      rating: 'Note de 1 √† 5',
      platform: 'Plateforme (Google, Facebook, etc.)'
    }
  });
}